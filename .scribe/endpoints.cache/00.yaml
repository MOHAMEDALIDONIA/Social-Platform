## Autogenerated by Scribe. DO NOT MODIFY.

name: Authentication
description: |-

  APIs for user registration, login, and logout.
endpoints:
  -
    httpMethods:
      - DELETE
    uri: api/v1/logout
    metadata:
      groupName: Authentication
      groupDescription: |-

        APIs for user registration, login, and logout.
      subgroup: ''
      subgroupDescription: ''
      title: 'User logout.'
      description: 'Logs out the authenticated user by revoking the current access token.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
             "status": true,
             "message": "Logged out"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
             "status": false,
             "message": "An error occurred Internal Server Error"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/register
    metadata:
      groupName: Authentication
      groupDescription: |-

        APIs for user registration, login, and logout.
      subgroup: ''
      subgroupDescription: ''
      title: 'Register a new user.'
      description: 'This endpoint registers a new user and returns a token for authentication.'
      authenticated: false
      custom: []
    headers:
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: "The user's full name."
        required: true
        example: '"John Doe"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: "The user's email address. Must be unique."
        required: true
        example: '"johndoe@example.com"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "The user's password. Must be confirmed."
        required: true
        example: '"password123"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Password confirmation.'
        required: true
        example: '"password123"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      image:
        name: image
        description: 'optional A profile image. Only jpg, jpeg, and png formats are allowed.'
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      name: '"John Doe"'
      email: '"johndoe@example.com"'
      password: '"password123"'
      password_confirmation: '"password123"'
    fileParameters:
      image: null
    responses:
      -
        status: 200
        content: |-
          {
             "status": true,
             "message": "user register successfully",
             "data": {
                 "user": {
                     "id": 1,
                     "name": "John Doe",
                     "email": "johndoe@example.com",
                     "image": "path/to/image.jpg",
                     "created_at": "2024-11-17T10:20:30.000Z"
                 },
                 "token": "4|AiwkA7Tmt9TtWAs...NkAzjl"
             }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
             "status": false,
             "message": "An error occurred Internal Server Error"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/login
    metadata:
      groupName: Authentication
      groupDescription: |-

        APIs for user registration, login, and logout.
      subgroup: ''
      subgroupDescription: ''
      title: 'User login.'
      description: 'Authenticates a user and returns a token if credentials are correct.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: "The user's email address."
        required: true
        example: '"johndoe@example.com"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "The user's password."
        required: true
        example: '"password123"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: '"johndoe@example.com"'
      password: '"password123"'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
             "status": true,
             "message": "user login successfully",
             "data": {
                 "user": {
                     "id": 1,
                     "name": "John Doe",
                     "email": "johndoe@example.com"
                 },
                 "token": "4|AiwkA7Tmt9TtWAs...NkAzjl"
             }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
             "status": false,
             "message": "An error occurred Internal Server Error"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 900
        content: |-
          {
             "status": false,
             "message": "The provided credentials are incorrect"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
